basePath: /api
definitions:
  dto.Pagination:
    properties:
      current_page:
        type: integer
      page_count:
        type: integer
      total:
        type: integer
    type: object
  dto.Token:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  model.Role:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      slug:
        type: string
      updated_at:
        type: string
    type: object
  model.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      role_ids:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
  request.Login:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  request.Refresh:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    required:
    - access_token
    - refresh_token
    type: object
  request.RoleCreate:
    properties:
      name:
        minLength: 5
        type: string
    required:
    - name
    type: object
  request.UserCreate:
    properties:
      email:
        maxLength: 50
        type: string
      name:
        maxLength: 50
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  request.UserUpdate:
    properties:
      name:
        maxLength: 50
        type: string
      role_ids:
        items:
          type: string
        type: array
    required:
    - name
    - role_ids
    type: object
  response.list:
    properties:
      data: {}
      pagination: {}
    type: object
  response.success:
    properties:
      data: {}
    type: object
info:
  contact: {}
  title: sso http api
  version: "1.0"
paths:
  /v1/auth:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.success'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
      security:
      - BearerAuth: []
      summary: get auth user
      tags:
      - auth
    post:
      consumes:
      - application/json
      parameters:
      - description: login request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.success'
            - properties:
                data:
                  $ref: '#/definitions/dto.Token'
              type: object
      summary: login
      tags:
      - auth
  /v1/auth/refresh:
    post:
      consumes:
      - application/json
      parameters:
      - description: token refresh request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.Refresh'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.success'
            - properties:
                data:
                  $ref: '#/definitions/dto.Token'
              type: object
      summary: refresh token
      tags:
      - auth
  /v1/roles:
    get:
      parameters:
      - description: page
        in: query
        name: pagination[page]
        type: integer
      - description: count
        in: query
        name: pagination[count]
        type: integer
      - description: created_at
        enum:
        - asc
        - desc
        in: query
        name: sorts[created_at]
        type: string
      - description: updated_at
        enum:
        - asc
        - desc
        in: query
        name: sorts[updated_at]
        type: string
      - description: name
        enum:
        - asc
        - desc
        in: query
        name: sorts[name]
        type: string
      - description: slug
        enum:
        - asc
        - desc
        in: query
        name: sorts[slug]
        type: string
      - description: name
        in: query
        name: filters[name]
        type: string
      - description: slug
        in: query
        name: filters[slug]
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.list'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Role'
                  type: array
                pagination:
                  $ref: '#/definitions/dto.Pagination'
              type: object
      security:
      - BearerAuth: []
      summary: roles list
      tags:
      - roles
    post:
      consumes:
      - application/json
      parameters:
      - description: role create request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.RoleCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.success'
            - properties:
                data:
                  $ref: '#/definitions/model.Role'
              type: object
      security:
      - BearerAuth: []
      summary: create role
      tags:
      - roles
  /v1/roles/{id}:
    delete:
      parameters:
      - description: role id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: delete role by id
      tags:
      - roles
    get:
      parameters:
      - description: role id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.success'
            - properties:
                data:
                  $ref: '#/definitions/model.Role'
              type: object
      security:
      - BearerAuth: []
      summary: get role by id
      tags:
      - roles
  /v1/users:
    get:
      parameters:
      - description: page
        in: query
        name: pagination[page]
        type: integer
      - description: count
        in: query
        name: pagination[count]
        type: integer
      - description: created_at
        enum:
        - asc
        - desc
        in: query
        name: sorts[created_at]
        type: string
      - description: updated_at
        enum:
        - asc
        - desc
        in: query
        name: sorts[updated_at]
        type: string
      - description: name
        in: query
        name: filters[name]
        type: string
      - description: email
        in: query
        name: filters[email]
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.list'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.User'
                  type: array
                pagination:
                  $ref: '#/definitions/dto.Pagination'
              type: object
      security:
      - BearerAuth: []
      summary: users list
      tags:
      - users
    post:
      consumes:
      - application/json
      parameters:
      - description: user create request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.UserCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.success'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
      summary: registration
      tags:
      - users
  /v1/users/{id}:
    delete:
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: delete user by id
      tags:
      - users
    get:
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.success'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
      security:
      - BearerAuth: []
      summary: get user by id
      tags:
      - users
    patch:
      consumes:
      - application/json
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      - description: user update request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.success'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
      security:
      - BearerAuth: []
      summary: update user data
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
